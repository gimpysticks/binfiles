#!/bin/bash

# Directory to share via Samba
SHARE_DIRECTORY="/media/sticks/ADATA HD710 PRO/adult"
# Share name that will appear on the network
SHARE_NAME="adult"
# Temporary Samba config file
TEMP_SAMBA_CONF="/tmp/smb_temp_$(date +%s).conf"
# Backup of original samba config
ORIGINAL_SAMBA_CONF="/etc/samba/smb.conf"
BACKUP_SAMBA_CONF="/tmp/smb_backup_$(date +%s).conf"

# Function to clean up (restore original samba config and restart service)
cleanup() {
    echo -e "\nCtrl+C detected. Cleaning up..."
    
    # Restore original Samba configuration
    if [ -f "$BACKUP_SAMBA_CONF" ]; then
        echo "Restoring original Samba configuration..."
        sudo cp "$BACKUP_SAMBA_CONF" "$ORIGINAL_SAMBA_CONF"
        sudo rm -f "$BACKUP_SAMBA_CONF"
        echo "Original Samba configuration restored."
    fi
    
    # Remove temporary config file
    if [ -f "$TEMP_SAMBA_CONF" ]; then
        rm -f "$TEMP_SAMBA_CONF"
    fi
    
    # Restart Samba service to apply original configuration
    echo "Restarting Samba service..."
    sudo systemctl restart smbd
    if [ $? -eq 0 ]; then
        echo "Samba service restarted successfully."
        echo "Share '$SHARE_NAME' has been disabled."
    else
        echo "Failed to restart Samba service. You may need to restart it manually."
    fi
    
    exit 0
}

# Trap Ctrl+C (SIGINT)
trap cleanup SIGINT

# Check if the directory to share exists
if [ ! -d "$SHARE_DIRECTORY" ]; then
    echo "Error: Directory '$SHARE_DIRECTORY' does not exist."
    echo "Please make sure the external drive is connected and mounted."
    exit 1
fi

echo "Setting up Samba share for: $SHARE_DIRECTORY"
echo "Share name: $SHARE_NAME"
echo "You may be prompted for your sudo password."

# Backup original Samba configuration
echo "Backing up original Samba configuration..."
sudo cp "$ORIGINAL_SAMBA_CONF" "$BACKUP_SAMBA_CONF"
if [ $? -ne 0 ]; then
    echo "Failed to backup Samba configuration. Exiting."
    exit 1
fi

# Create temporary Samba configuration with the new share
echo "Creating temporary Samba configuration..."
cat "$BACKUP_SAMBA_CONF" > "$TEMP_SAMBA_CONF"
cat >> "$TEMP_SAMBA_CONF" << EOF

[$SHARE_NAME]
    path = $SHARE_DIRECTORY
    browseable = yes
    read only = no
    guest ok = yes
    create mask = 0755
    directory mask = 0755
    public = yes
    writable = yes
EOF

# Apply the new configuration
echo "Applying new Samba configuration..."
sudo cp "$TEMP_SAMBA_CONF" "$ORIGINAL_SAMBA_CONF"
if [ $? -ne 0 ]; then
    echo "Failed to apply new Samba configuration. Restoring backup..."
    sudo cp "$BACKUP_SAMBA_CONF" "$ORIGINAL_SAMBA_CONF"
    rm -f "$TEMP_SAMBA_CONF" "$BACKUP_SAMBA_CONF"
    exit 1
fi

# Restart Samba service to apply changes
echo "Restarting Samba service..."
sudo systemctl restart smbd
if [ $? -eq 0 ]; then
    echo "Samba service restarted successfully."
    
    # Get the local IP address
    LOCAL_IP=$(hostname -I | awk '{print $1}')
    
    echo "====================================="
    echo "Samba share '$SHARE_NAME' is now active!"
    echo "====================================="
    echo "Share path: $SHARE_DIRECTORY"
    echo "Network path: //$LOCAL_IP/$SHARE_NAME"
    echo "Windows: \\\\$LOCAL_IP\\$SHARE_NAME"
    echo "====================================="
    echo "The share is accessible to all devices on your network."
    echo "Press Ctrl+C to stop sharing and restore original configuration."
    echo "====================================="
    
    # Keep the script running until Ctrl+C
    while true; do
        sleep 1
    done
else
    echo "Failed to restart Samba service. Restoring backup..."
    sudo cp "$BACKUP_SAMBA_CONF" "$ORIGINAL_SAMBA_CONF"
    rm -f "$TEMP_SAMBA_CONF" "$BACKUP_SAMBA_CONF"
    exit 1
fi
