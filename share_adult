#!/bin/bash

# Temporary SMB Share Script for Videos
# This script creates a temporary SMB share that video players can access

VIDEO_DIR="/media/sticks/LUKS-Adult/Videos"
SHARE_NAME="TempVideos"
SMB_CONF="/etc/samba/smb.conf"
BACKUP_CONF="/tmp/smb.conf.backup.$$"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Function to check if directory exists and is accessible
check_directory() {
    if [ ! -d "$VIDEO_DIR" ]; then
        echo -e "${RED}Error: Directory $VIDEO_DIR does not exist!${NC}"
        exit 1
    fi
    
    if [ ! -r "$VIDEO_DIR" ]; then
        echo -e "${RED}Error: Cannot read directory $VIDEO_DIR!${NC}"
        exit 1
    fi
}

# Function to check if samba is installed
check_samba() {
    if ! command -v smbd &> /dev/null; then
        echo -e "${RED}Error: Samba is not installed!${NC}"
        echo "Install it with: sudo apt install samba"
        exit 1
    fi
}

# Function to backup original samba config
backup_config() {
    echo "Backing up original Samba configuration..."
    sudo cp "$SMB_CONF" "$BACKUP_CONF"
}

# Function to cleanup on exit
cleanup() {
    echo -e "\n${YELLOW}Cleaning up...${NC}"
    
    # Stop samba services
    echo "Stopping Samba services..."
    sudo systemctl stop smbd nmbd 2>/dev/null || true
    
    # Restore original config
    if [ -f "$BACKUP_CONF" ]; then
        echo "Restoring original Samba configuration..."
        sudo cp "$BACKUP_CONF" "$SMB_CONF" || true
        sudo rm -f "$BACKUP_CONF" || true
    fi
    
    # Restart samba services
    echo "Restarting Samba services..."
    sudo systemctl start smbd nmbd 2>/dev/null || true
    
    echo -e "${GREEN}Temporary share removed successfully!${NC}"
    exit 0
}

# Function to add temporary share
add_share() {
    echo "Adding temporary SMB share configuration..."
    
    # Add the share configuration
    sudo tee -a "$SMB_CONF" > /dev/null <<EOF

# Temporary Video Share - DO NOT EDIT MANUALLY
[$SHARE_NAME]
   comment = Temporary Video Share
   path = $VIDEO_DIR
   browseable = yes
   read only = yes
   guest ok = yes
   public = yes
   create mask = 0644
   directory mask = 0755
   force user = $(whoami)
EOF
}

# Function to restart samba services
restart_samba() {
    echo "Restarting Samba services..."
    sudo systemctl restart smbd nmbd
    
    # Wait a moment for services to start
    sleep 2
    
    # Check if services are running
    if ! sudo systemctl is-active --quiet smbd; then
        echo -e "${RED}Error: SMB service failed to start!${NC}"
        cleanup
        exit 1
    fi
}

# Function to display connection information
show_connection_info() {
    local ip_address=$(hostname -I | awk '{print $1}')
    
    echo -e "\n${GREEN}=== SMB Share Active ===${NC}"
    echo -e "${GREEN}Share Name:${NC} $SHARE_NAME"
    echo -e "${GREEN}Directory:${NC} $VIDEO_DIR"
    echo -e "${GREEN}Network Path:${NC} \\\\$ip_address\\$SHARE_NAME"
    echo
    echo -e "${YELLOW}=== How to Connect ===${NC}"
    echo "• Windows File Explorer: \\\\$ip_address\\$SHARE_NAME"
    echo "• VLC: smb://$ip_address/$SHARE_NAME"
    echo "• Kodi: Add Videos > Browse > Windows network (SMB)"
    echo "• Android (VLC): Network > Local Network > $ip_address"
    echo
    echo -e "${RED}Press Ctrl+C to stop sharing and cleanup${NC}"
    echo
}

# Main execution
main() {
    echo -e "${GREEN}Starting Temporary Video Share...${NC}"
    
    # Perform checks
    check_directory
    check_samba
    
    # Set trap to cleanup on script exit (Ctrl+C or error)
    trap cleanup EXIT INT TERM
    
    # Backup and modify configuration
    backup_config
    add_share
    restart_samba
    
    # Show connection information
    show_connection_info
    
    # Keep script running and show periodic status
    echo "Service is running... Press Ctrl+C to stop."
    while true; do
        # Use shorter sleep intervals for better responsiveness
        sleep 1
        # Optional: Show current connections every 60 seconds (uncomment if desired)
        # if [ $(($(date +%s) % 60)) -eq 0 ]; then
        #     echo "Active connections: $(sudo smbstatus -b 2>/dev/null | grep -c "^[0-9]")"
        # fi
    done
}

# Run main function
main
