#!/bin/bash
#
# This script finds and removes orphaned application files from uninstalled Flatpaks.
#
# It's designed to be safe by:
#   1.  Listing files and directories it intends to remove.
#   2.  Providing a dry-run option.
#   3.  Requiring confirmation before actual removal.
#
# IMPORTANT:
#   -   Run this script with caution, especially without the dry-run option.
#   -   It's recommended to back up your system before using this script.
#   -   This script assumes the default Flatpak locations.  If you've customized
#       your Flatpak installation, you may need to adjust the paths.
#   -   The script now checks for the existence of the directories before
#       attempting to remove anything.
#
# Variables
# ---------
# Default Flatpak locations
# These are the standard locations where Flatpak stores app data.
# If you have customized your Flatpak installation, you will need to change these.
#
FLATPAK_APP_DIR="$HOME/.var/app"
FLATPAK_CACHE_DIR="$HOME/.cache/app"
FLATPAK_CONFIG_DIR="$HOME/.config/app" # Added config directory
#
# Functions
# ---------
#
# Function to list files and directories to be removed
# ----------------------------------------------------
list_files() {
  echo "The following files and directories would be removed:"
  find "$1" -maxdepth 1 -mindepth 1 -print0 | while IFS= read -r -d $'\0' item; do
    # Use printf to handle special characters in filenames safely
    printf "%s\n" "- $item"
  done
}

# Function to remove files and directories
# ----------------------------------------
remove_files() {
  find "$1" -maxdepth 1 -mindepth 1 -print0 | while IFS= read -r -d $'\0' item; do
    if [[ -d "$item" ]]; then
      # Use rmdir -p to remove empty directories and their parents.
      rmdir -p "$item"
      if [ $? -eq 0 ]; then
        printf "Removed directory: %s\n" "$item"
      else
        printf "Failed to remove directory: %s\n" "$item"
      fi
    else
      # remove files
      rm -f "$item"
      if [ $? -eq 0 ]; then
        printf "Removed file: %s\n" "$item"
      else
        printf "Failed to remove file: %s\n" "$item"
      fi
    fi
  done
}

# Function to check if a directory is empty
# ------------------------------------------
is_dir_empty() {
  if [ "$(ls -A "$1" 2>/dev/null)" ]; then
    return 1 # Directory is not empty
  else
    return 0 # Directory is empty
  fi
}

# Main
# ----

# Check for command-line options
# -n: dry run
# -y: yes, remove files without confirmation
#
dry_run=false
yes_flag=false

while getopts "ny" opt; do
  case "$opt" in
    n)
      dry_run=true
      ;;
    y)
      yes_flag=true
      ;;
    \?)
      echo "Invalid option: -$OPTARG" >&2
      echo "Usage: $0 [-n] [-y]" >&2
      echo "  -n  Perform a dry run (list files only)" >&2
      echo "  -y  Remove files without confirmation" >&2
      exit 1
      ;;
  esac
done
shift $((OPTIND - 1)) # Consume the options

# Script Description
echo "This script finds and removes orphaned application files from uninstalled Flatpaks."
echo "It checks these locations:"
echo "  - $FLATPAK_APP_DIR"
echo "  - $FLATPAK_CACHE_DIR"
echo "  - $FLATPAK_CONFIG_DIR" # Added config dir
echo "Use with caution!"
echo ""

# Check if the directories exist before proceeding.
if [ ! -d "$FLATPAK_APP_DIR" ] && [ ! -d "$FLATPAK_CACHE_DIR" ] && [ ! -d "$FLATPAK_CONFIG_DIR" ]; then #check all three
  echo "Neither $FLATPAK_APP_DIR, $FLATPAK_CACHE_DIR, nor $FLATPAK_CONFIG_DIR exist.  Exiting."
  exit 0
fi
# 1. Handle $HOME/.var/app
if [ -d "$FLATPAK_APP_DIR" ]; then
  echo "Checking $FLATPAK_APP_DIR..."
  if is_dir_empty "$FLATPAK_APP_DIR"; then
    echo "$FLATPAK_APP_DIR is empty."
  else
    if $dry_run; then
      list_files "$FLATPAK_APP_DIR"
    else
      list_files "$FLATPAK_APP_DIR" #show files
      if $yes_flag; then
        remove_files "$FLATPAK_APP_DIR"
      else
        read -p "Do you want to remove these files and directories? (y/N) " choice
        case "$choice" in
          [yY])
            remove_files "$FLATPAK_APP_DIR"
            ;;
          [nN]*)
            echo "No files removed from $FLATPAK_APP_DIR."
            ;;
          *)
            echo "Invalid response. No files removed from $FLATPAK_APP_DIR."
            ;;
        esac
      fi
    fi
  fi
fi

# 2. Handle $HOME/.cache/app
if [ -d "$FLATPAK_CACHE_DIR" ]; then
  echo "Checking $FLATPAK_CACHE_DIR..."
  if is_dir_empty "$FLATPAK_CACHE_DIR"; then
    echo "$FLATPAK_CACHE_DIR is empty."
  else
    if $dry_run; then
      list_files "$FLATPAK_CACHE_DIR"
    else
      list_files "$FLATPAK_CACHE_DIR" #show files
      if $yes_flag; then
        remove_files "$FLATPAK_CACHE_DIR"
      else
        read -p "Do you want to remove these files and directories? (y/N) " choice
        case "$choice" in
          [yY])
            remove_files "$FLATPAK_CACHE_DIR"
            ;;
          [nN]*)
            echo "No files removed from $FLATPAK_CACHE_DIR."
            ;;
          *)
            echo "Invalid response. No files removed from $FLATPAK_CACHE_DIR."
            ;;
        esac
      fi
    fi
  fi
fi

# 3. Handle $HOME/.config/app
if [ -d "$FLATPAK_CONFIG_DIR" ]; then
  echo "Checking $FLATPAK_CONFIG_DIR..."
  if is_dir_empty "$FLATPAK_CONFIG_DIR"; then
    echo "$FLATPAK_CONFIG_DIR is empty."
  else
    if $dry_run; then
      list_files "$FLATPAK_CONFIG_DIR"
    else
      list_files "$FLATPAK_CONFIG_DIR"  # Show files
      if $yes_flag; then
        remove_files "$FLATPAK_CONFIG_DIR"
      else
        read -p "Do you want to remove these files and directories? (y/N) " choice
        case "$choice" in
          [yY])
            remove_files "$FLATPAK_CONFIG_DIR"
            ;;
          [nN]*)
            echo "No files removed from $FLATPAK_CONFIG_DIR."
            ;;
          *)
            echo "Invalid response. No files removed from $FLATPAK_CONFIG_DIR."
            ;;
        esac
      fi
    fi
  fi
fi

echo "Done."
exit 0
