#!/bin/bash

# update_wiki_index.sh - Manages links in Home.md based on directory contents
# This script analyzes Home.md and adds/removes links based on markdown files in the directory

set -euo pipefail

WIKI_DIR="/home/sticks/zets"
HOME_FILE="$WIKI_DIR/Home.md"
TEMP_FILE=$(mktemp)
BACKUP_FILE="$HOME_FILE.backup.$(date +%Y%m%d_%H%M%S)"

# Function to generate display name from filename
generate_display_name() {
  local filename="$1"
  local display_name
  local timestamp="0" # Default timestamp if none found

  # Remove .md extension
  display_name="${filename%.md}"

  # Handle different filename patterns
  if [[ "$display_name" =~ ^([0-9]+)-(.+)$ ]]; then
    # Pattern: timestamp-title (e.g., "202510012154-vim_keys")
    timestamp="${BASH_REMATCH[1]}"
    display_name="${BASH_REMATCH[2]}"
  elif [[ "$display_name" =~ ^([0-9]+)-[0-9]+-(.+)$ ]]; then
    # Pattern: timestamp-timestamp-title (e.g., "202510012154-202510012154-Stuff")
    timestamp="${BASH_REMATCH[1]}"
    display_name="${BASH_REMATCH[2]}"
  fi

  # Clean up the display name
  # Replace underscores and hyphens with spaces
  display_name="${display_name//_/ }"
  display_name="${display_name//-/ }"

  # Handle hashtags and special characters
  display_name="${display_name//#/ #}"

  # Clean up extra spaces
  display_name=$(echo "$display_name" | sed 's/  \\+/ /g' | sed 's/^ \\+\| \\+$//g')

  echo "$timestamp|$display_name" # Return timestamp and display name separated by |
}

# Function to extract existing links from Home.md
get_existing_links() {
  if [[ -f "$HOME_FILE" ]]; then
    # Extract markdown links, get the filename part
    grep -oP '^\\s*-\\s*\[[^\]]+\]\\(\\K[^)]+(?=\\))' "$HOME_FILE" | sort
  fi
}

# Function to get all markdown files except Home.md
get_all_md_files() {
  find "$WIKI_DIR" -maxdepth 1 -name "*.md" -not -name "Home.md" -printf "%f\\n" | sort
}

# Function to check if a file exists in the directory
file_exists() {
  local filename="$1"
  [[ -f "$WIKI_DIR/$filename" ]]
}

main() {
  echo "Updating wiki index in $HOME_FILE"

  # Create backup
  if [[ -f "$HOME_FILE" ]]; then
    cp "$HOME_FILE" "$BACKUP_FILE"
    echo "Created backup: $BACKUP_FILE"
  fi

  # Get current state
  mapfile -t existing_links < <(get_existing_links)
  mapfile -t all_files < <(get_all_md_files)

  echo "Found ${#all_files[@]} markdown files in directory"
  # Create arrays for processing
  declare -A existing_files=()
  declare -A current_files=()

  # Populate existing files hash
  for link in "${existing_links[@]}"; do
    existing_files["$link"]=1
  done

  # Populate current files hash
  for file in "${all_files[@]}"; do
    current_files["$file"]=1
  done
  # Find files to add (in directory but not in Home.md)
  files_to_add=()
  for file in "${all_files[@]}"; do
    if [[ -z "${existing_files[$file]:-}" ]]; then
      files_to_add+=("$file")
    fi
  done

  # Find files to remove (in Home.md but not in directory)
  files_to_remove=()
  for link in "${existing_links[@]}"; do
    if [[ -z "${current_files[$link]:-}" ]]; then
      files_to_remove+=("$link")
    fi
  fi
  done

  echo "Files to add: ${#files_to_add[@]}"
  # If no changes needed
  if [[ ${#files_to_add[@]} -eq 0 && ${#files_to_remove[@]} -eq 0 ]]; then
    echo "No changes needed. Home.md is up to date."
    rm -f "$BACKUP_FILE"
  fi
  # Process the Home.md file
  {
    # Write header
    echo "# Wiki Index"
    echo ""
    echo "This wiki contains the following pages:"
    echo ""

    # Create new link list
    declare -a new_links_with_timestamps=()

    # Add existing valid links
    for link in "${existing_links[@]}"; do
      if [[ -n "${current_files[$link]:-}" ]]; then
        IFS='|' read -r timestamp display_name < <(generate_display_name "$link")
        new_links_with_timestamps+=("$timestamp|- [$display_name]($link)")
      fi
    done

    # Add new links
    for file in "${files_to_add[@]}"; do
      IFS='|' read -r timestamp display_name < <(generate_display_name "$file")
      new_links_with_timestamps+=("$timestamp|- [$display_name]($file)")
    done

    # Sort links by timestamp in reverse (latest first) and then extract the link part
    printf '%s\\n' "${new_links_with_timestamps[@]}" | sort -r -t '|' -k1,1 | cut -d '|' -f2-
  # Replace original file
  mv "$TEMP_FILE" "$HOME_FILE"

  echo "Updated $HOME_FILE successfully"

  # Show summary
  if [[ ${#files_to_add[@]} -gt 0 ]]; then
    echo ""
    echo "Added links for:"
    printf '  - %s\\n' "${files_to_add[@]}"
  fi

  if [[ ${#files_to_remove[@]} -gt 0 ]]; then
    echo ""
    echo "Removed links for:"
    printf '  - %s\\n' "${files_to_remove[@]}"
  fi

  echo ""
  echo "Total pages now indexed: $(grep -c '^- \\[' "$HOME_FILE")"
}

# Handle command line options (commented out for debugging)